// <auto-generated>
//     Generated by the ui framework.  DO NOT EDIT!
//     Remark: 可以另写一个文件来扩展此类来绑定 UI 控件, 实现 UI View 相关的逻辑
// </auto-generated>

using System;
using TMPro;
using UIFramework;
using UIFramework.UIScreen;
using UnityEngine;
using UnityEngine.UI;

// ReSharper disable once CheckNamespace
namespace MyUI
{
    /// <summary>
    /// Choose 的 View 类   
    /// </summary>
    public sealed partial class ChooseScreenView : UIScreenViewBase
    {
        [SerializeField] private Button          m_DiyBtn;
        [SerializeField] private Button          m_TestBtn;
        [SerializeField] private Button          m_SettingBtn;
        [SerializeField] private Button          m_TagOne;
        [SerializeField] private Button          m_TagTwo;
        [SerializeField] private Button          m_CloseBtn;
        [SerializeField] private GameObject      m_Empty;
        [SerializeField] private GameObject      m_Tag;
        [SerializeField] private GameObject      m_Setting;
        [SerializeField] private TMP_InputField  m_TagInput;
        [SerializeField] private TextMeshProUGUI m_TagOneText;
        [SerializeField] private TextMeshProUGUI m_TagTwoText;
        [SerializeField] private Slider          m_BgmSlider;
        [SerializeField] private Slider          m_SoundSlider;
        [SerializeField] private Button          m_OutClose;
        private                  int             _nowTag;

        private void Start()
        {
            m_DiyBtn.onClick.AddListener(OnClickDiyBtn);
            m_TestBtn.onClick.AddListener(OnClickTestBtn);
            m_SettingBtn.onClick.AddListener(OnClickSetting);
            m_BgmSlider.onValueChanged.AddListener(OnChangeBgm);
            m_SoundSlider.onValueChanged.AddListener(OnChangeSound);
            m_TagOne.onClick.AddListener(() => { OnClickTag(1); });
            m_TagTwo.onClick.AddListener(() => { OnClickTag(2); });
            m_CloseBtn.onClick.AddListener(OnClickClose);
            m_OutClose.onClick.AddListener(() => { m_OutClose.gameObject.SetActive(false); });
            SoundManager.Instance.PlayBGM(SoundDirConst.Bgm + SoundNameUtil.MainBgm, true);
            m_OutClose.gameObject.SetActive(true);
        }

        private void OnClickDiyBtn()
        {
            UIManager.OpenScreen<MainScreenPresenter>();
        }

        private void OnClickTag(int order)
        {
            _nowTag = order;
            m_Tag.SetActive(true);
            m_CloseBtn.gameObject.SetActive(true);
        }

        private void OnClickTestBtn()
        {
            m_Empty.SetActive(true);
            m_CloseBtn.gameObject.SetActive(true);
        }

        private void OnClickSetting()
        {
            m_Setting.SetActive(true);
            m_CloseBtn.gameObject.SetActive(true);
        }

        private void OnClickClose()
        {
            m_CloseBtn.gameObject.SetActive(false);
            m_Empty.SetActive(false);
            m_Setting.SetActive(false);
            m_Tag.SetActive(false);
            if (_nowTag == 1)
            {
                m_TagOneText.text = m_TagInput.text;
            }

            if (_nowTag == 2)
            {
                m_TagTwoText.text = m_TagInput.text;
            }
        }

        private void OnChangeBgm(float bgm)
        {
            SoundManager.Instance.SetBGMVolume(bgm);
        }

        private void OnChangeSound(float sound)
        {
            SoundManager.Instance.SetSoundVolume(sound);
        }
    }
}