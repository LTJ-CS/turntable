// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: common.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform int32

const (
	Platform_UNKNOWN Platform = 0   // 未知（非法）
	Platform_WX      Platform = 1   // 微信
	Platform_QQ      Platform = 2   // QQ
	Platform_TT      Platform = 3   // 抖音
	Platform_VIVO    Platform = 4   // ViVo
	Platform_OPPO    Platform = 5   // Oppo
	Platform_KS      Platform = 6   // 快手
	Platform_JOYO    Platform = 7   // 简游登录
	Platform_HW      Platform = 8   // 华为
	Platform_Zfb     Platform = 9   // 支付宝
	Platform_Xhs     Platform = 10  // 小红书
	Platform_BETA    Platform = 999 // 测试环境登录（仅测试环境可用）
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "WX",
		2:   "QQ",
		3:   "TT",
		4:   "VIVO",
		5:   "OPPO",
		6:   "KS",
		7:   "JOYO",
		8:   "HW",
		9:   "Zfb",
		10:  "Xhs",
		999: "BETA",
	}
	Platform_value = map[string]int32{
		"UNKNOWN": 0,
		"WX":      1,
		"QQ":      2,
		"TT":      3,
		"VIVO":    4,
		"OPPO":    5,
		"KS":      6,
		"JOYO":    7,
		"HW":      8,
		"Zfb":     9,
		"Xhs":     10,
		"BETA":    999,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// 定义 Http 的 ErrorCode
type EHttpErrorCode int32

const (
	EHttpErrorCode_Nil                     EHttpErrorCode = 0     // 无
	EHttpErrorCode_Success                 EHttpErrorCode = 1     // 成功
	EHttpErrorCode_ParamsInvalid           EHttpErrorCode = 10001 // 参数错误
	EHttpErrorCode_SystemErr               EHttpErrorCode = 10002 // 系统错误
	EHttpErrorCode_Unauthorized            EHttpErrorCode = 10003 // 没有权限
	EHttpErrorCode_DatabaseErr             EHttpErrorCode = 10004 // 数据库错误
	EHttpErrorCode_UserNotLogin            EHttpErrorCode = 10005 // 没有登录
	EHttpErrorCode_UserSignErr             EHttpErrorCode = 10006 // 用户token过期，需要重新登录获取token
	EHttpErrorCode_UserNotExistErr         EHttpErrorCode = 10007 // 用户不存在
	EHttpErrorCode_UserAlreadyExistErr     EHttpErrorCode = 10008 // 用户已存在
	EHttpErrorCode_JsonUnmarshalErr        EHttpErrorCode = 10009 // JSON 解析失败
	EHttpErrorCode_DecryptErr              EHttpErrorCode = 10010 // 解密失败
	EHttpErrorCode_SocketNotExistErr       EHttpErrorCode = 10011 // 长链接不存在
	EHttpErrorCode_AdVideoOutOfMaxTimesErr EHttpErrorCode = 10012 // 超出最大看视频次数
	EHttpErrorCode_SystemUnlockErr         EHttpErrorCode = 10013 // 系统没解锁
	EHttpErrorCode_ConfigErr               EHttpErrorCode = 10014 // 配置错误
	EHttpErrorCode_ContentSecErr           EHttpErrorCode = 10015 // 输入内容不合法
	EHttpErrorCode_ServerNotServeErr       EHttpErrorCode = 10016 // 服务器不在服务中
	EHttpErrorCode_NoData                  EHttpErrorCode = 10017 // 没有此数据
	EHttpErrorCode_LoginVersionErr         EHttpErrorCode = 10018 // 登录版本过低
	EHttpErrorCode_NoMatchPlayInfo         EHttpErrorCode = 10019 // 没有玩家的比赛数据
	EHttpErrorCode_JWTTokenErr             EHttpErrorCode = 10020 // token 错误
	EHttpErrorCode_JWTTokenOutOfDateErr    EHttpErrorCode = 10021 // token 过期
	EHttpErrorCode_JWTTokenUIDDecodeErr    EHttpErrorCode = 10022 // token 中的 uid 解码失败
	EHttpErrorCode_JWTTokenModifiedErr     EHttpErrorCode = 10023 // token 被篡改
	EHttpErrorCode_TooManyReqErr           EHttpErrorCode = 10024 // 访问太频繁
	EHttpErrorCode_SameAsCacheErr          EHttpErrorCode = 10025 // 请求数据与缓存一致 304
	EHttpErrorCode_InternalErr             EHttpErrorCode = 10026 // 内部服务错误
	EHttpErrorCode_PlatformNotRightErr     EHttpErrorCode = 10027 // 客户端平台不正确
	EHttpErrorCode_AccountErr              EHttpErrorCode = 10028 // 账号异常，可能被封禁
	EHttpErrorCode_ClientVersionLowErr     EHttpErrorCode = 10029 // 客户端版本低需要升级到最新版本
	EHttpErrorCode_WxSessionKeyInvalid     EHttpErrorCode = 10030 // 微信 session key 无效
	EHttpErrorCode_WxSessionKeyNotFind     EHttpErrorCode = 10031 // 找不到客户端上传的key, 无法解密数据包
	EHttpErrorCode_RespDataErr             EHttpErrorCode = 10032 // 服务器返回的数据不正确
	EHttpErrorCode_PlatformNotExistErr     EHttpErrorCode = 10033 // 平台号不正确
)

// Enum value maps for EHttpErrorCode.
var (
	EHttpErrorCode_name = map[int32]string{
		0:     "Nil",
		1:     "Success",
		10001: "ParamsInvalid",
		10002: "SystemErr",
		10003: "Unauthorized",
		10004: "DatabaseErr",
		10005: "UserNotLogin",
		10006: "UserSignErr",
		10007: "UserNotExistErr",
		10008: "UserAlreadyExistErr",
		10009: "JsonUnmarshalErr",
		10010: "DecryptErr",
		10011: "SocketNotExistErr",
		10012: "AdVideoOutOfMaxTimesErr",
		10013: "SystemUnlockErr",
		10014: "ConfigErr",
		10015: "ContentSecErr",
		10016: "ServerNotServeErr",
		10017: "NoData",
		10018: "LoginVersionErr",
		10019: "NoMatchPlayInfo",
		10020: "JWTTokenErr",
		10021: "JWTTokenOutOfDateErr",
		10022: "JWTTokenUIDDecodeErr",
		10023: "JWTTokenModifiedErr",
		10024: "TooManyReqErr",
		10025: "SameAsCacheErr",
		10026: "InternalErr",
		10027: "PlatformNotRightErr",
		10028: "AccountErr",
		10029: "ClientVersionLowErr",
		10030: "WxSessionKeyInvalid",
		10031: "WxSessionKeyNotFind",
		10032: "RespDataErr",
		10033: "PlatformNotExistErr",
	}
	EHttpErrorCode_value = map[string]int32{
		"Nil":                     0,
		"Success":                 1,
		"ParamsInvalid":           10001,
		"SystemErr":               10002,
		"Unauthorized":            10003,
		"DatabaseErr":             10004,
		"UserNotLogin":            10005,
		"UserSignErr":             10006,
		"UserNotExistErr":         10007,
		"UserAlreadyExistErr":     10008,
		"JsonUnmarshalErr":        10009,
		"DecryptErr":              10010,
		"SocketNotExistErr":       10011,
		"AdVideoOutOfMaxTimesErr": 10012,
		"SystemUnlockErr":         10013,
		"ConfigErr":               10014,
		"ContentSecErr":           10015,
		"ServerNotServeErr":       10016,
		"NoData":                  10017,
		"LoginVersionErr":         10018,
		"NoMatchPlayInfo":         10019,
		"JWTTokenErr":             10020,
		"JWTTokenOutOfDateErr":    10021,
		"JWTTokenUIDDecodeErr":    10022,
		"JWTTokenModifiedErr":     10023,
		"TooManyReqErr":           10024,
		"SameAsCacheErr":          10025,
		"InternalErr":             10026,
		"PlatformNotRightErr":     10027,
		"AccountErr":              10028,
		"ClientVersionLowErr":     10029,
		"WxSessionKeyInvalid":     10030,
		"WxSessionKeyNotFind":     10031,
		"RespDataErr":             10032,
		"PlatformNotExistErr":     10033,
	}
)

func (x EHttpErrorCode) Enum() *EHttpErrorCode {
	p := new(EHttpErrorCode)
	*p = x
	return p
}

func (x EHttpErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHttpErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (EHttpErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x EHttpErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EHttpErrorCode.Descriptor instead.
func (EHttpErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x7a, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x58, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x51, 0x51, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x49, 0x56, 0x4f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x05,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x59, 0x4f,
	0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x57, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x66,
	0x62, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x68, 0x73, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x04,
	0x42, 0x45, 0x54, 0x41, 0x10, 0xe7, 0x07, 0x2a, 0xef, 0x05, 0x0a, 0x0e, 0x45, 0x48, 0x74, 0x74,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x69,
	0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x91, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72,
	0x72, 0x10, 0x92, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x10, 0x93, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x45, 0x72, 0x72, 0x10, 0x94, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x95, 0x4e, 0x12, 0x10, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x96, 0x4e, 0x12, 0x14,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x10, 0x97, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x10, 0x98, 0x4e, 0x12, 0x15,
	0x0a, 0x10, 0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x10, 0x99, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x45, 0x72, 0x72, 0x10, 0x9a, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x10, 0x9b, 0x4e, 0x12, 0x1c,
	0x0a, 0x17, 0x41, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x72, 0x72, 0x10, 0x9c, 0x4e, 0x12, 0x14, 0x0a, 0x0f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x10,
	0x9d, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x10,
	0x9e, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x45, 0x72, 0x72, 0x10, 0x9f, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x45, 0x72, 0x72, 0x10, 0xa0, 0x4e, 0x12, 0x0b,
	0x0a, 0x06, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0xa1, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x10, 0xa2,
	0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4e, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0xa3, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x57, 0x54, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x10, 0xa4, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x4a, 0x57, 0x54,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x10, 0xa5, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x49, 0x44, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x10, 0xa6, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x10, 0xa7, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x6f, 0x6f,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x45, 0x72, 0x72, 0x10, 0xa8, 0x4e, 0x12, 0x13, 0x0a,
	0x0e, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x72, 0x72, 0x10,
	0xa9, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x10, 0xaa, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x6f, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45, 0x72, 0x72, 0x10, 0xab, 0x4e, 0x12, 0x0f,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x10, 0xac, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x10, 0xad, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x57, 0x78, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0xae, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x57, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x10, 0xaf, 0x4e, 0x12, 0x10, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x10, 0xb0, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x10, 0xb1, 0x4e, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_proto_goTypes = []interface{}{
	(Platform)(0),       // 0: ClientProto.Platform
	(EHttpErrorCode)(0), // 1: ClientProto.EHttpErrorCode
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
